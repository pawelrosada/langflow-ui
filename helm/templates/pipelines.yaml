{{/*
Pipelines deployment for Open WebUI integration
This creates a deployment for the pipelines service that connects Open WebUI to Langflow
*/}}
{{- if .Values.pipelines.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "langflow-app.fullname" . }}-pipelines
  labels:
    {{- include "langflow-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: pipelines
spec:
  replicas: {{ .Values.pipelines.replicas | default 1 }}
  selector:
    matchLabels:
      {{- include "langflow-app.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: pipelines
  template:
    metadata:
      labels:
        {{- include "langflow-app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: pipelines
    spec:
      initContainers:
        - name: copy-pipelines
          image: busybox
          command: ['sh', '-c', 'cp /app/pipelines-config/* /app/pipelines/ 2>/dev/null || true && ls -la /app/pipelines/']
          volumeMounts:
            - name: pipelines-config
              mountPath: /app/pipelines-config
            - name: pipelines-storage
              mountPath: /app/pipelines
      containers:
        - name: pipelines
          image: "{{ .Values.pipelines.image.repository }}:{{ .Values.pipelines.image.tag }}"
          imagePullPolicy: {{ .Values.pipelines.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 9099
              protocol: TCP
          env:
            - name: PIPELINES_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.secrets.create }}{{ include "langflow-app.fullname" . }}-secrets{{ else }}{{ .Values.pipelines.existingSecret }}{{ end }}
                  key: pipelines-api-key
            - name: LANGFLOW_BASE_URL
              value: "http://{{ include "langflow-app.fullname" . }}:{{ .Values.service.port }}"
            - name: ENABLE_AUTO_RELOAD
              value: "true"
            - name: RESET_PIPELINES_DIR
              value: "false"
            {{- with .Values.pipelines.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          volumeMounts:
            - name: pipelines-storage
              mountPath: /app/pipelines
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
          resources:
            {{- toYaml .Values.pipelines.resources | nindent 12 }}
      volumes:
        - name: pipelines-storage
          {{- if .Values.pipelines.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "langflow-app.fullname" . }}-pipelines-pvc
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: pipelines-config
          configMap:
            name: {{ include "langflow-app.fullname" . }}-pipelines-config
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "langflow-app.fullname" . }}-pipelines
  labels:
    {{- include "langflow-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: pipelines
spec:
  type: {{ .Values.pipelines.service.type }}
  ports:
    - port: {{ .Values.pipelines.service.port }}
      targetPort: http
      protocol: TCP
      name: http
      {{- if and (eq .Values.pipelines.service.type "NodePort") .Values.pipelines.service.nodePort }}
      nodePort: {{ .Values.pipelines.service.nodePort }}
      {{- end }}
  selector:
    {{- include "langflow-app.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: pipelines

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "langflow-app.fullname" . }}-pipelines-config
  labels:
    {{- include "langflow-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: pipelines
data:
  langflow_pipeline.py: |
    """
    Langflow Pipeline Integration for Open WebUI
    This pipeline connects Open WebUI to Langflow workflows.
    """
    import os
    import time
    from datetime import datetime
    from logging import getLogger
    from typing import Generator, Iterator, List, Union, Dict, Optional

    import httpx
    from pydantic import BaseModel, Field

    logger = getLogger(__name__)
    logger.setLevel("DEBUG")

    class Pipeline:
        class Valves(BaseModel):
            LANGFLOW_BASE_URL: str = Field(default=os.getenv("LANGFLOW_BASE_URL", "http://{{ include "langflow-app.fullname" . }}:{{ .Values.service.port }}"))
            RATE_LIMIT: int = Field(default=5)

        def __init__(self):
            self.name = "Langflow Integration Pipeline"
            self.id = "langflow-integration"
            self.valves = self.Valves(
                **{k: os.getenv(k, v.default) for k, v in self.Valves.model_fields.items()}
            )

        async def on_startup(self):
            logger.info(f"Langflow pipeline started: {self.name}")
            logger.info(f"Langflow URL: {self.valves.LANGFLOW_BASE_URL}")

        async def on_shutdown(self):
            logger.debug(f"Langflow pipeline stopped: {self.name}")

        def rate_check(self, dt_start: datetime):
            """Apply rate limiting"""
            diff = (datetime.now() - dt_start).total_seconds()
            buffer = 1 / self.valves.RATE_LIMIT
            if diff < buffer:
                time.sleep(buffer - diff)

        def pipe(
            self, user_message: str, model_id: str, messages: List[dict], body: dict
        ) -> Union[str, Generator, Iterator]:
            logger.info(f"Processing request with Langflow")

            dt_start = datetime.now()
            return "".join([
                chunk for chunk in self.call_langflow(user_message, dt_start)
            ])

        def call_langflow(self, prompt: str, dt_start: datetime) -> Generator:
            """Call Langflow for processing"""
            self.rate_check(dt_start)

            url = f"{self.valves.LANGFLOW_BASE_URL}/api/v1/run/basic-chat?stream=false"
            payload = {"input_value": prompt, "output_type": "chat", "input_type": "chat"}

            try:
                with httpx.Client(timeout=30.0) as client:
                    response = client.post(url, json=payload)
                    response.raise_for_status()
                    data = response.json()

                    # Extract response text from Langflow output structure
                    text = (
                        data.get("outputs", [{}])[0]
                        .get("outputs", [{}])[0]
                        .get("results", {})
                        .get("message", {})
                        .get("text", "Brak odpowiedzi z Langflow.")
                    )

                    logger.info(f"Successfully processed request with Langflow")
                    yield text

            except httpx.TimeoutException:
                logger.error(f"Timeout calling Langflow: {url}")
                yield f"üö® **B≈ÇƒÖd**: Przekroczono limit czasu dla Langflow."

            except httpx.HTTPStatusError as e:
                logger.error(f"HTTP error {e.response.status_code} calling Langflow: {e}")
                if e.response.status_code == 404:
                    yield f"‚ùå **Workflow nieznaleziony**: Sprawd≈∫ konfiguracjƒô Langflow."
                else:
                    yield f"üö® **B≈ÇƒÖd HTTP {e.response.status_code}**: Nie uda≈Ço siƒô wykonaƒá ≈ºƒÖdania."

            except httpx.ConnectError:
                logger.error(f"Connection error calling Langflow: {url}")
                yield f"üö® **B≈ÇƒÖd po≈ÇƒÖczenia**: Nie mo≈ºna po≈ÇƒÖczyƒá siƒô z Langflow."

            except Exception as e:
                logger.error(f"Unexpected error calling Langflow: {e}")
                yield f"üö® **Nieoczekiwany b≈ÇƒÖd**: {str(e)}"

---
{{- if .Values.pipelines.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "langflow-app.fullname" . }}-pipelines-pvc
  labels:
    {{- include "langflow-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: pipelines
spec:
  accessModes:
    {{- range .Values.pipelines.persistence.accessModes }}
    - {{ . | quote }}
    {{- end }}
  resources:
    requests:
      storage: {{ .Values.pipelines.persistence.size | quote }}
  {{- if .Values.pipelines.persistence.storageClass }}
  {{- if (eq "-" .Values.pipelines.persistence.storageClass) }}
  storageClassName: ""
  {{- else }}
  storageClassName: {{ .Values.pipelines.persistence.storageClass }}
  {{- end }}
  {{- end }}
{{- end }}
{{- end }}
