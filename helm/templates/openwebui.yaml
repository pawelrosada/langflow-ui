{{- if .Values.openwebui.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "langflow-app.fullname" . }}-openwebui
  labels:
    {{- include "langflow-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: openwebui
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "langflow-app.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: openwebui
  template:
    metadata:
      labels:
        {{- include "langflow-app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: openwebui
    spec:
      {{- if .Values.openwebui.database.usePostgreSQL }}
      initContainers:
        - name: create-openwebui-db
          image: postgres:16
          command:
            - /bin/bash
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until pg_isready -h {{ include "langflow-app.fullname" . }}-postgresql -p 5432 -U {{ .Values.postgresql.auth.username }}; do
                echo "PostgreSQL is unavailable - sleeping"
                sleep 2
              done
              echo "PostgreSQL is ready - creating OpenWebUI database if it doesn't exist..."
              PGPASSWORD="$POSTGRES_PASSWORD" createdb -h {{ include "langflow-app.fullname" . }}-postgresql -p 5432 -U {{ .Values.postgresql.auth.username }} {{ .Values.openwebui.database.name }} || echo "Database {{ .Values.openwebui.database.name }} already exists or creation failed - continuing..."
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.secrets.create }}{{ include "langflow-app.fullname" . }}-secrets{{ else }}{{ .Values.postgresql.auth.existingSecret }}{{ end }}
                  key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey }}
      {{- end }}
      containers:
        - name: openwebui
          image: "{{ .Values.openwebui.image.repository }}:{{ .Values.openwebui.image.tag }}"
          imagePullPolicy: {{ .Values.openwebui.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: ENABLE_SIGNUP
              value: "true"
            {{- if .Values.pipelines.enabled }}
            # Pipelines integration for OpenWebUI
            - name: OPENAI_API_BASE_URL
              value: "http://{{ include "langflow-app.fullname" . }}-pipelines:{{ .Values.pipelines.service.port }}/v1"
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.secrets.create }}{{ include "langflow-app.fullname" . }}-secrets{{ else }}{{ .Values.pipelines.existingSecret }}{{ end }}
                  key: pipelines-api-key
            {{- end }}
            {{- if .Values.openwebui.database.usePostgreSQL }}
            # PostgreSQL configuration for OpenWebUI
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.secrets.create }}{{ include "langflow-app.fullname" . }}-secrets{{ else }}{{ .Values.postgresql.auth.existingSecret }}{{ end }}
                  key: openwebui-database-url
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.secrets.create }}{{ include "langflow-app.fullname" . }}-secrets{{ else }}{{ .Values.postgresql.auth.existingSecret }}{{ end }}
                  key: {{ .Values.postgresql.auth.secretKeys.userPasswordKey }}
            {{- else }}
            # SQLite configuration (development only - not recommended for production)
            - name: DATA_DIR
              value: "/app/backend/data"
            {{- end }}
            {{- with .Values.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
          resources:
            {{- toYaml .Values.openwebui.resources | nindent 12 }}
          {{- if not .Values.openwebui.database.usePostgreSQL }}
          volumeMounts:
            - name: openwebui-data
              mountPath: /app/backend/data
          {{- end }}
      {{- if not .Values.openwebui.database.usePostgreSQL }}
      volumes:
        - name: openwebui-data
          emptyDir: {}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "langflow-app.fullname" . }}-openwebui
  labels:
    {{- include "langflow-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: openwebui
spec:
  type: {{ .Values.openwebui.service.type }}
  ports:
    - port: {{ .Values.openwebui.service.port }}
      targetPort: http
      protocol: TCP
      name: http
      {{- if and (eq .Values.openwebui.service.type "NodePort") .Values.openwebui.service.nodePort }}
      nodePort: {{ .Values.openwebui.service.nodePort }}
      {{- end }}
  selector:
    {{- include "langflow-app.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: openwebui
{{- end }}
